{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UACtB,SAAkBC,G,kBAOJ,IAANC,GACFC,EAAcD,EAAGE,GACdC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBb,EAAAc,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE9DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBb,EAAAc,OAAOI,QAAQ,sBAAuCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAG9DN,EAAI,GACNY,YAAW,WACTX,EAAcD,EAAGa,OAAOX,GAASW,OAAOC,GAAQd,GAC7CG,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBb,EAAAc,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE9DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBb,EAAAc,OAAOI,QAAQ,sBAAqCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,MAE7DQ,EAAOd,E,EAxBdD,EAAIgB,iBAKJ,IAJA,IAAMC,EAASrB,EAAKsB,SAAS,GAAGC,MAC1BJ,EAAOnB,EAAKsB,SAAS,GAAGC,MACxBhB,EAAQP,EAAKsB,SAAS,GAAGC,MAEtBC,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAACC,EAAAD,GAuBnC,SAASlB,EAAcI,EAAUC,GAC/B,OAAO,IAAIe,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCd,YAAW,WACLY,EAEFF,EAAQ,CAAEjB,WAAUC,UAGpBiB,EAAO,CAAElB,WAAUC,S,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', generate);\nfunction generate(evt) {\n  evt.preventDefault();\n  const amount = form.elements[2].value;\n  const step = form.elements[1].value;\n  const delay = form.elements[0].value;\n\n  for (let i = 1; i <= amount; i += 1) {\n    if (i === 1) {\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n    if (i > 1) {\n      setTimeout(() => {\n        createPromise(i, Number(delay) + Number(step) * i)\n          .then(({ position, delay }) => {\n            Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          });\n      }, step * i);\n    }\n  }\n\n  function createPromise(position, delay) {\n    return new Promise((fulfill, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          // Fulfill\n          fulfill({ position, delay });\n        } else {\n          // Reject\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","evt","i","createPromise","delay1","then","param","position","delay","Notify","success","concat","catch","failure","setTimeout","Number","step","preventDefault","amount","elements","value","i1","_loop","Promise","fulfill","reject","shouldResolve","Math","random"],"version":3,"file":"03-promises.4bbdd9f8.js.map"}