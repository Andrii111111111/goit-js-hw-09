{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UACtB,SAAkBC,GAChBA,EAAIC,iBACJ,MAAMC,EAASN,EAAKO,SAAS,GAAGC,MAC1BC,EAAOT,EAAKO,SAAS,GAAGC,MACxBE,EAAQV,EAAKO,SAAS,GAAGC,MAE/B,IAAK,IAAIG,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EACtB,IAANA,GACFC,EAAcD,EAAGD,GACdG,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBjB,EAAAkB,OAAOC,QAAQ,uBAAqBH,QAAiBC,MAAU,IAEhEG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MAClBjB,EAAAkB,OAAOG,QAAQ,sBAAoBL,QAAiBC,MAAU,IAGpEK,YAAW,KACTR,EAAcD,EAAGU,OAAOX,GAASW,OAAOZ,GAAQE,GAC7CE,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBjB,EAAAkB,OAAOC,QAAQ,uBAAqBH,QAAiBC,MAAU,IAEhEG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MAClBjB,EAAAkB,OAAOG,QAAQ,sBAAoBL,QAAeC,MAAU,GAC5D,GACHN,EAAOE,GAGZ,SAASC,EAAcE,EAAUC,GAC/B,OAAO,IAAIO,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCP,YAAW,KACLK,EAEFF,EAAQ,C,SAAET,E,MAAUC,IAGpBS,EAAO,C,SAAEV,E,MAAUC,IAErBa,QAAQC,IAAId,EAAM,GACjBA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', generate);\nfunction generate(evt) {\n  evt.preventDefault();\n  const amount = form.elements[2].value;\n  const step = form.elements[1].value;\n  const delay = form.elements[0].value;\n\n  for (let i = 1; i <= amount; i += 1) {\n    if (i === 1) {\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n    setTimeout(() => {\n      createPromise(i, Number(delay) + Number(step) * i)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, step * i);\n  }\n\n  function createPromise(position, delay) {\n    return new Promise((fulfill, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          // Fulfill\n          fulfill({ position, delay });\n        } else {\n          // Reject\n          reject({ position, delay });\n        }\n        console.log(delay);\n      }, delay);\n    });\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","addEventListener","evt","preventDefault","amount","elements","value","step","delay1","i","createPromise","then","position","delay","Notify","success","catch","failure","setTimeout","Number","Promise","fulfill","reject","shouldResolve","Math","random","console","log"],"version":3,"file":"03-promises.5ed8b5fb.js.map"}